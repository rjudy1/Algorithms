# Author: Rachael Judy
# Assignment: HW 6 with Strings X = “ABCBCAABABCABBABCABB” and
#                               Y = “ABACBAAABCBCBBCABAABA”
# Implemented using book pseudocode
#
"""
Result:
LCS(x, y) = ABCBAAABCBBBCABB

B Table
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, '*', '<', '*', '<', '<', '*', '*', '*', '<', '<', '<', '<', '<', '<', '<', '*', '<', '*', '*', '<', '*']
[0, '^', '*', '<', '<', '*', '<', '<', '<', '*', '<', '*', '<', '*', '*', '<', '<', '*', '<', '<', '*', '<']
[0, '^', '^', '^', '*', '<', '<', '<', '<', '<', '*', '<', '*', '<', '<', '*', '<', '<', '<', '<', '<', '<']
[0, '^', '*', '^', '^', '*', '<', '<', '<', '*', '<', '*', '<', '*', '*', '<', '<', '*', '<', '<', '*', '<']
[0, '^', '^', '^', '*', '^', '^', '^', '^', '^', '*', '<', '*', '<', '<', '*', '<', '<', '<', '<', '<', '<']
[0, '*', '^', '*', '^', '^', '*', '*', '*', '<', '^', '^', '^', '^', '^', '^', '*', '<', '*', '*', '<', '*']
[0, '*', '^', '*', '^', '^', '*', '*', '*', '<', '<', '<', '<', '<', '<', '<', '*', '^', '*', '*', '<', '*']
[0, '^', '*', '^', '^', '*', '^', '^', '^', '*', '<', '*', '<', '*', '*', '<', '<', '*', '^', '^', '*', '<']
[0, '*', '^', '*', '^', '^', '*', '*', '*', '^', '^', '^', '^', '^', '^', '^', '*', '<', '*', '*', '^', '*']
[0, '^', '*', '^', '^', '*', '^', '^', '^', '*', '<', '*', '<', '*', '*', '<', '^', '*', '<', '<', '*', '^']
[0, '^', '^', '^', '*', '^', '^', '^', '^', '^', '*', '<', '*', '<', '<', '*', '<', '^', '^', '^', '^', '^']
[0, '*', '^', '*', '^', '^', '*', '*', '*', '^', '^', '^', '^', '^', '^', '^', '*', '<', '*', '*', '<', '*']
[0, '^', '*', '^', '^', '*', '^', '^', '^', '*', '^', '*', '<', '*', '*', '<', '^', '*', '<', '<', '*', '<']
[0, '^', '*', '^', '^', '*', '^', '^', '^', '*', '^', '*', '^', '*', '*', '<', '<', '*', '^', '^', '*', '<']
[0, '*', '^', '*', '^', '^', '*', '*', '*', '^', '^', '^', '^', '^', '^', '^', '*', '<', '*', '*', '^', '*']
[0, '^', '*', '^', '^', '*', '^', '^', '^', '*', '^', '*', '^', '*', '*', '<', '^', '*', '<', '<', '*', '^']
[0, '^', '^', '^', '*', '^', '^', '^', '^', '^', '*', '^', '*', '^', '^', '*', '<', '^', '^', '^', '^', '^']
[0, '*', '^', '*', '^', '^', '*', '*', '*', '^', '^', '^', '^', '^', '^', '^', '*', '<', '*', '*', '<', '*']
[0, '^', '*', '^', '^', '*', '^', '^', '^', '*', '^', '*', '^', '*', '*', '^', '^', '*', '<', '<', '*', '<']
[0, '^', '*', '^', '^', '*', '^', '^', '^', '*', '^', '*', '^', '*', '*', '^', '^', '*', '^', '^', '*', '<']

 C Table
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
[0, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
[0, 1, 2, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
[0, 1, 2, 2, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
[0, 1, 2, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6]
[0, 1, 2, 3, 3, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7]
[0, 1, 2, 3, 3, 4, 5, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8]
[0, 1, 2, 3, 3, 4, 5, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9]
[0, 1, 2, 3, 3, 4, 5, 6, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9]
[0, 1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
[0, 1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10]
[0, 1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11]
[0, 1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 10, 11, 11, 11, 11, 11, 11, 11, 12, 12]
[0, 1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 10, 11, 11, 11, 12, 12, 12, 12, 12, 13]
[0, 1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 10, 11, 12, 12, 12, 13, 13, 13, 13, 13]
[0, 1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11, 11, 12, 13, 13, 13, 13, 13, 13, 13]
[0, 1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 10, 11, 11, 12, 13, 14, 14, 14, 14, 14, 14]
[0, 1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 10, 11, 12, 12, 13, 14, 15, 15, 15, 15, 15]
[0, 1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 10, 11, 12, 13, 13, 14, 15, 15, 15, 16, 16]
"""


# set up to use 1 indexing
def Generate_Tables(x, y):
    m = len(x)
    n = len(y)

    # b and c tables hold arrows to follow c table and max LCS path respectively
    b = [[0 for j in range(n)] for i in range(m)]
    c = [[0 for j in range(n)] for i in range(m)]

    # populate tables
    for i in range(1, m):
        for j in range(1, n):
            # find common char
            if x[i] == y[j]:
                c[i][j] = c[i-1][j-1] + 1
                b[i][j] = "*"  # should be pointed upper left

            # if upper is higher than left
            elif c[i-1][j] >= c[i][j-1]:
                c[i][j] = c[i-1][j]
                b[i][j] = "^"
            else:
                c[i][j] = c[i][j-1]
                b[i][j] = "<"
    return c, b


# interpret and display table
def Print_LCS(b, X, i, j):
    if i == 0 or j == 0:
        return

    # display the LCS
    if b[i][j] == "*":
        Print_LCS(b, X, i-1, j-1)
        print(X[i], end='')
    elif b[i][j] == "^":
        Print_LCS(b, X, i-1, j)
    else:
        Print_LCS(b, X, i, j-1)


# Added dummy var at beginning of list in order to get to one indexing for actual list
X = ['X', 'A', 'B', 'C', 'B', 'C', 'A', 'A', 'B', 'A', 'B', 'C', 'A', 'B', 'B', 'A', 'B', 'C', 'A', 'B', 'B']
Y = ['X', 'A', 'B', 'A', 'C', 'B', 'A', 'A', 'A', 'B', 'C', 'B', 'C', 'B', 'B', 'C', 'A', 'B', 'A', 'A', 'B', 'A']

c, b = Generate_Tables(X, Y)

# display tables
print("B Table")
for i in b:
    print(i)

print("\n C Table")
for i in c:
    print(i)

print()

Print_LCS(b, X, len(X)-1, len(Y)-1)
